* Introduction
  We start with N-Triples, as they are defined in the [[http://www.w3.org/TR/2014/REC-n-triples-20140225/][W3C recommendation]] because
  this is the smallest subset of non-XML RDF serialization.

* Creating a test file
  First we need some test file. We use the [[http://www.w3.org/TR/2014/REC-n-triples-20140225/#sec-introduction][first]]
#+INCLUDE: "example1.nt" src ntriple
  and [[http://www.w3.org/TR/2014/REC-n-triples-20140225/#sec-literals][third]]
#+INCLUDE: "example3.nt" src ntriple
  example from the specification.

* Defining the mode
  Regarding to http://www.emacswiki.org/emacs/DerivedMode we take the approach
  of deriving the mode from the Fundamental Mode:
  #+BEGIN_SRC emacs-lisp
    (define-derived-mode ntriple-mode fundamental-mode "N-Triple"
      "N-Triple mode is a major mode for editing RDF-files serialized as N-Triples."
      )
  #+END_SRC
  Now we can switch to our example file and try:
  : M-x ntriple-mode
  This loads the N-Triple mode for this file, like it can be seen in the status
  line.

* Syntax highlighting
  To enable highlighting the variable `font-lock-defaults' must not be nil.
  For the first approach we just set the variable buffer local to a list
  containing an empty list, by adding the following line to our mode definition:
  #+BEGIN_SRC emacs-lisp
    (set (make-local-variable 'font-lock-defaults) '(()))
  #+END_SRC
  When we now switch back to our example file and reload the mode, we see, that
  strings between double quotes (`"') are highlighted.

* Syntax table
  Syntax highlighting and parsing is partly driven by the syntax table. We
  modify it a little to achieve several goals.

** Enabling comments
   Comments start with a `#' and end with a newline. Therefore we add the
   following two lines to our mode definition:
   #+BEGIN_SRC emacs-lisp
     (modify-syntax-entry ?# "<")
     (modify-syntax-entry ?\n ">")       
   #+END_SRC
   But this leads to a problem: The symbol `#' is only the start of a comment
   outside an IRI or a quoted string. The latter is done automatically, but not
   the first case. To achieve this, we add some syntax properties by setting the
   buffer local variable `font-lock-syntactic-keywords' in out mode definition:
   #+BEGIN_SRC emacs-lisp
     (set (make-local-variable 'font-lock-syntactic-keywords)
	  '(("<[^>]*\\(#[^>]*\\)" 1 "w")))
   #+END_SRC
   This regular expression states, that a `#' which is prefixed by a string,
   that starts with a `<' and has not yet ended with a `>' hat to be treated as
   a word character and not as the start of a comment.
